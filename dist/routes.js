"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.router = void 0;
const express_1 = require("express");
const createUserController_1 = require("./controllers/user/createUserController");
const authUserController_1 = require("./controllers/user/authUserController");
const detailUserController_1 = require("./controllers/user/detailUserController");
const isAuthencated_1 = require("./middlewares/isAuthencated");
const createCategoryController_1 = require("./controllers/category/createCategoryController");
const listCategoryController_1 = require("./controllers/category/listCategoryController");
const createProductController_1 = require("./controllers/product/createProductController");
const listByCategoryController_1 = require("./controllers/product/listByCategoryController");
const createOrderController_1 = require("./controllers/order/createOrderController");
const removeOrderController_1 = require("./controllers/order/removeOrderController");
const addItemController_1 = require("./controllers/order/addItemController");
const removeItemController_1 = require("./controllers/order/removeItemController");
const sendOrderController_1 = require("./controllers/order/sendOrderController");
const listOrdersController_1 = require("./controllers/order/listOrdersController");
const detailOrderController_1 = require("./controllers/order/detailOrderController");
const finishOrderController_1 = require("./controllers/order/finishOrderController");
const router = (0, express_1.Router)();
exports.router = router;
router.post("/users", new createUserController_1.CreateUserController().handle);
router.post("/session", new authUserController_1.AuthUserController().handle);
router.get("/me", isAuthencated_1.isAuthencated, new detailUserController_1.DetailUserController().handle);
router.post("/category", isAuthencated_1.isAuthencated, new createCategoryController_1.CreateCategoryController().handle);
router.get("/category", isAuthencated_1.isAuthencated, new listCategoryController_1.ListCategoryController().handle);
router.post("/product", isAuthencated_1.isAuthencated, new createProductController_1.CreateProductController().handle);
router.get("/category/product", isAuthencated_1.isAuthencated, new listByCategoryController_1.ListByCategoryController().handle);
router.post("/order", isAuthencated_1.isAuthencated, new createOrderController_1.CreateOrderController().handle);
router.delete("/order", isAuthencated_1.isAuthencated, new removeOrderController_1.RemoveOrderController().handle);
router.post("/order/add", isAuthencated_1.isAuthencated, new addItemController_1.AddItemController().handle);
router.delete("/order/remove", isAuthencated_1.isAuthencated, new removeItemController_1.RemoveItemController().handle);
router.put("/order/send", isAuthencated_1.isAuthencated, new sendOrderController_1.SendOrderController().handle);
router.get("/orders", isAuthencated_1.isAuthencated, new listOrdersController_1.ListOrdersController().handle);
router.get("/order/detail", isAuthencated_1.isAuthencated, new detailOrderController_1.DetailOrderController().handle);
router.put("/order/finish", isAuthencated_1.isAuthencated, new finishOrderController_1.FinishOrderController().handle);
